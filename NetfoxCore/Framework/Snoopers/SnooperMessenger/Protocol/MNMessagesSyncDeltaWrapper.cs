// Copyright (c) 2017 Jan Pluskal, Viliam Letavay
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System;
using System.Text;
using Thrift.Protocol;

namespace Netfox.Snoopers.SnooperMessenger.Protocol
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class MNMessagesSyncDeltaWrapper : TBase
  {
    private MNMessagesSyncDeltaNoOp _DeltaNoOp;
    private MNMessagesSyncDeltaNewMessage _DeltaNewMessage;
    private MNMessagesSyncDeltaNewGroupThread _DeltaNewGroupThread;
    private MNMessagesSyncDeltaMarkRead _DeltaMarkRead;
    private MNMessagesSyncDeltaMarkUnread _DeltaMarkUnread;
    private MNMessagesSyncDeltaMessageDelete _DeltaMessageDelete;
    private MNMessagesSyncDeltaThreadDelete _DeltaThreadDelete;
    private MNMessagesSyncDeltaParticipantsAddedToGroupThread _DeltaParticipantsAddedToGroupThread;
    private MNMessagesSyncDeltaParticipantLeftGroupThread _DeltaParticipantLeftGroupThread;
    private MNMessagesSyncDeltaThreadName _DeltaThreadName;
    private MNMessagesSyncDeltaThreadImage _DeltaThreadImage;
    private MNMessagesSyncDeltaThreadMuteSettings _DeltaThreadMuteSettings;
    private MNMessagesSyncDeltaThreadAction _DeltaThreadAction;
    private MNMessagesSyncDeltaThreadFolder _DeltaThreadFolder;
    private MNMessagesSyncDeltaRTCEventLog _DeltaRTCEventLog;
    private MNMessagesSyncDeltaVideoCall _DeltaVideoCall;
    private MNMessagesSyncDeltaAdminTextMessage _DeltaAdminTextMessage;
    private MNMessagesSyncDeltaForcedFetch _DeltaForcedFetch;
    private MNMessagesSyncDeltaReadReceipt _DeltaReadReceipt;
    private MNMessagesSyncDeltaBroadcastMessage _DeltaBroadcastMessage;
    private MNMessagesSyncDeltaMarkFolderSeen _DeltaMarkFolderSeen;
    private MNMessagesSyncDeltaSentMessage _DeltaSentMessage;
    private MNMessagesSyncDeltaPinnedGroups _DeltaPinnedGroups;
    private MNMessagesSyncDeltaPageAdminReply _DeltaPageAdminReply;
    private MNMessagesSyncDeltaDeliveryReceipt _DeltaDeliveryReceipt;
    private MNMessagesSyncDeltaP2PPaymentMessage _DeltaP2PPaymentMessage;
    private MNMessagesSyncDeltaFolderCount _DeltaFolderCount;
    private MNMessagesSyncDeltaPagesManagerEvent _DeltaPagesManagerEvent;
    private MNMessagesSyncDeltaNotificationSettings _DeltaNotificationSettings;
    private MNMessagesSyncDeltaReplaceMessage _DeltaReplaceMessage;
    private MNMessagesSyncDeltaZeroRating _DeltaZeroRating;

    public MNMessagesSyncDeltaNoOp DeltaNoOp
    {
      get
      {
        return _DeltaNoOp;
      }
      set
      {
        __isset.DeltaNoOp = true;
        this._DeltaNoOp = value;
      }
    }

    public MNMessagesSyncDeltaNewMessage DeltaNewMessage
    {
      get
      {
        return _DeltaNewMessage;
      }
      set
      {
        __isset.DeltaNewMessage = true;
        this._DeltaNewMessage = value;
      }
    }

    public MNMessagesSyncDeltaNewGroupThread DeltaNewGroupThread
    {
      get
      {
        return _DeltaNewGroupThread;
      }
      set
      {
        __isset.DeltaNewGroupThread = true;
        this._DeltaNewGroupThread = value;
      }
    }

    public MNMessagesSyncDeltaMarkRead DeltaMarkRead
    {
      get
      {
        return _DeltaMarkRead;
      }
      set
      {
        __isset.DeltaMarkRead = true;
        this._DeltaMarkRead = value;
      }
    }

    public MNMessagesSyncDeltaMarkUnread DeltaMarkUnread
    {
      get
      {
        return _DeltaMarkUnread;
      }
      set
      {
        __isset.DeltaMarkUnread = true;
        this._DeltaMarkUnread = value;
      }
    }

    public MNMessagesSyncDeltaMessageDelete DeltaMessageDelete
    {
      get
      {
        return _DeltaMessageDelete;
      }
      set
      {
        __isset.DeltaMessageDelete = true;
        this._DeltaMessageDelete = value;
      }
    }

    public MNMessagesSyncDeltaThreadDelete DeltaThreadDelete
    {
      get
      {
        return _DeltaThreadDelete;
      }
      set
      {
        __isset.DeltaThreadDelete = true;
        this._DeltaThreadDelete = value;
      }
    }

    public MNMessagesSyncDeltaParticipantsAddedToGroupThread DeltaParticipantsAddedToGroupThread
    {
      get
      {
        return _DeltaParticipantsAddedToGroupThread;
      }
      set
      {
        __isset.DeltaParticipantsAddedToGroupThread = true;
        this._DeltaParticipantsAddedToGroupThread = value;
      }
    }

    public MNMessagesSyncDeltaParticipantLeftGroupThread DeltaParticipantLeftGroupThread
    {
      get
      {
        return _DeltaParticipantLeftGroupThread;
      }
      set
      {
        __isset.DeltaParticipantLeftGroupThread = true;
        this._DeltaParticipantLeftGroupThread = value;
      }
    }

    public MNMessagesSyncDeltaThreadName DeltaThreadName
    {
      get
      {
        return _DeltaThreadName;
      }
      set
      {
        __isset.DeltaThreadName = true;
        this._DeltaThreadName = value;
      }
    }

    public MNMessagesSyncDeltaThreadImage DeltaThreadImage
    {
      get
      {
        return _DeltaThreadImage;
      }
      set
      {
        __isset.DeltaThreadImage = true;
        this._DeltaThreadImage = value;
      }
    }

    public MNMessagesSyncDeltaThreadMuteSettings DeltaThreadMuteSettings
    {
      get
      {
        return _DeltaThreadMuteSettings;
      }
      set
      {
        __isset.DeltaThreadMuteSettings = true;
        this._DeltaThreadMuteSettings = value;
      }
    }

    public MNMessagesSyncDeltaThreadAction DeltaThreadAction
    {
      get
      {
        return _DeltaThreadAction;
      }
      set
      {
        __isset.DeltaThreadAction = true;
        this._DeltaThreadAction = value;
      }
    }

    public MNMessagesSyncDeltaThreadFolder DeltaThreadFolder
    {
      get
      {
        return _DeltaThreadFolder;
      }
      set
      {
        __isset.DeltaThreadFolder = true;
        this._DeltaThreadFolder = value;
      }
    }

    public MNMessagesSyncDeltaRTCEventLog DeltaRTCEventLog
    {
      get
      {
        return _DeltaRTCEventLog;
      }
      set
      {
        __isset.DeltaRTCEventLog = true;
        this._DeltaRTCEventLog = value;
      }
    }

    public MNMessagesSyncDeltaVideoCall DeltaVideoCall
    {
      get
      {
        return _DeltaVideoCall;
      }
      set
      {
        __isset.DeltaVideoCall = true;
        this._DeltaVideoCall = value;
      }
    }

    public MNMessagesSyncDeltaAdminTextMessage DeltaAdminTextMessage
    {
      get
      {
        return _DeltaAdminTextMessage;
      }
      set
      {
        __isset.DeltaAdminTextMessage = true;
        this._DeltaAdminTextMessage = value;
      }
    }

    public MNMessagesSyncDeltaForcedFetch DeltaForcedFetch
    {
      get
      {
        return _DeltaForcedFetch;
      }
      set
      {
        __isset.DeltaForcedFetch = true;
        this._DeltaForcedFetch = value;
      }
    }

    public MNMessagesSyncDeltaReadReceipt DeltaReadReceipt
    {
      get
      {
        return _DeltaReadReceipt;
      }
      set
      {
        __isset.DeltaReadReceipt = true;
        this._DeltaReadReceipt = value;
      }
    }

    public MNMessagesSyncDeltaBroadcastMessage DeltaBroadcastMessage
    {
      get
      {
        return _DeltaBroadcastMessage;
      }
      set
      {
        __isset.DeltaBroadcastMessage = true;
        this._DeltaBroadcastMessage = value;
      }
    }

    public MNMessagesSyncDeltaMarkFolderSeen DeltaMarkFolderSeen
    {
      get
      {
        return _DeltaMarkFolderSeen;
      }
      set
      {
        __isset.DeltaMarkFolderSeen = true;
        this._DeltaMarkFolderSeen = value;
      }
    }

    public MNMessagesSyncDeltaSentMessage DeltaSentMessage
    {
      get
      {
        return _DeltaSentMessage;
      }
      set
      {
        __isset.DeltaSentMessage = true;
        this._DeltaSentMessage = value;
      }
    }

    public MNMessagesSyncDeltaPinnedGroups DeltaPinnedGroups
    {
      get
      {
        return _DeltaPinnedGroups;
      }
      set
      {
        __isset.DeltaPinnedGroups = true;
        this._DeltaPinnedGroups = value;
      }
    }

    public MNMessagesSyncDeltaPageAdminReply DeltaPageAdminReply
    {
      get
      {
        return _DeltaPageAdminReply;
      }
      set
      {
        __isset.DeltaPageAdminReply = true;
        this._DeltaPageAdminReply = value;
      }
    }

    public MNMessagesSyncDeltaDeliveryReceipt DeltaDeliveryReceipt
    {
      get
      {
        return _DeltaDeliveryReceipt;
      }
      set
      {
        __isset.DeltaDeliveryReceipt = true;
        this._DeltaDeliveryReceipt = value;
      }
    }

    public MNMessagesSyncDeltaP2PPaymentMessage DeltaP2PPaymentMessage
    {
      get
      {
        return _DeltaP2PPaymentMessage;
      }
      set
      {
        __isset.DeltaP2PPaymentMessage = true;
        this._DeltaP2PPaymentMessage = value;
      }
    }

    public MNMessagesSyncDeltaFolderCount DeltaFolderCount
    {
      get
      {
        return _DeltaFolderCount;
      }
      set
      {
        __isset.DeltaFolderCount = true;
        this._DeltaFolderCount = value;
      }
    }

    public MNMessagesSyncDeltaPagesManagerEvent DeltaPagesManagerEvent
    {
      get
      {
        return _DeltaPagesManagerEvent;
      }
      set
      {
        __isset.DeltaPagesManagerEvent = true;
        this._DeltaPagesManagerEvent = value;
      }
    }

    public MNMessagesSyncDeltaNotificationSettings DeltaNotificationSettings
    {
      get
      {
        return _DeltaNotificationSettings;
      }
      set
      {
        __isset.DeltaNotificationSettings = true;
        this._DeltaNotificationSettings = value;
      }
    }

    public MNMessagesSyncDeltaReplaceMessage DeltaReplaceMessage
    {
      get
      {
        return _DeltaReplaceMessage;
      }
      set
      {
        __isset.DeltaReplaceMessage = true;
        this._DeltaReplaceMessage = value;
      }
    }

    public MNMessagesSyncDeltaZeroRating DeltaZeroRating
    {
      get
      {
        return _DeltaZeroRating;
      }
      set
      {
        __isset.DeltaZeroRating = true;
        this._DeltaZeroRating = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool DeltaNoOp;
      public bool DeltaNewMessage;
      public bool DeltaNewGroupThread;
      public bool DeltaMarkRead;
      public bool DeltaMarkUnread;
      public bool DeltaMessageDelete;
      public bool DeltaThreadDelete;
      public bool DeltaParticipantsAddedToGroupThread;
      public bool DeltaParticipantLeftGroupThread;
      public bool DeltaThreadName;
      public bool DeltaThreadImage;
      public bool DeltaThreadMuteSettings;
      public bool DeltaThreadAction;
      public bool DeltaThreadFolder;
      public bool DeltaRTCEventLog;
      public bool DeltaVideoCall;
      public bool DeltaAdminTextMessage;
      public bool DeltaForcedFetch;
      public bool DeltaReadReceipt;
      public bool DeltaBroadcastMessage;
      public bool DeltaMarkFolderSeen;
      public bool DeltaSentMessage;
      public bool DeltaPinnedGroups;
      public bool DeltaPageAdminReply;
      public bool DeltaDeliveryReceipt;
      public bool DeltaP2PPaymentMessage;
      public bool DeltaFolderCount;
      public bool DeltaPagesManagerEvent;
      public bool DeltaNotificationSettings;
      public bool DeltaReplaceMessage;
      public bool DeltaZeroRating;
    }

    public MNMessagesSyncDeltaWrapper() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                DeltaNoOp = new MNMessagesSyncDeltaNoOp();
                DeltaNoOp.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                DeltaNewMessage = new MNMessagesSyncDeltaNewMessage();
                DeltaNewMessage.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                DeltaNewGroupThread = new MNMessagesSyncDeltaNewGroupThread();
                DeltaNewGroupThread.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                DeltaMarkRead = new MNMessagesSyncDeltaMarkRead();
                DeltaMarkRead.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Struct) {
                DeltaMarkUnread = new MNMessagesSyncDeltaMarkUnread();
                DeltaMarkUnread.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Struct) {
                DeltaMessageDelete = new MNMessagesSyncDeltaMessageDelete();
                DeltaMessageDelete.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Struct) {
                DeltaThreadDelete = new MNMessagesSyncDeltaThreadDelete();
                DeltaThreadDelete.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.Struct) {
                DeltaParticipantsAddedToGroupThread = new MNMessagesSyncDeltaParticipantsAddedToGroupThread();
                DeltaParticipantsAddedToGroupThread.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.Struct) {
                DeltaParticipantLeftGroupThread = new MNMessagesSyncDeltaParticipantLeftGroupThread();
                DeltaParticipantLeftGroupThread.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.Struct) {
                DeltaThreadName = new MNMessagesSyncDeltaThreadName();
                DeltaThreadName.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.Struct) {
                DeltaThreadImage = new MNMessagesSyncDeltaThreadImage();
                DeltaThreadImage.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.Struct) {
                DeltaThreadMuteSettings = new MNMessagesSyncDeltaThreadMuteSettings();
                DeltaThreadMuteSettings.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.Struct) {
                DeltaThreadAction = new MNMessagesSyncDeltaThreadAction();
                DeltaThreadAction.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 14:
              if (field.Type == TType.Struct) {
                DeltaThreadFolder = new MNMessagesSyncDeltaThreadFolder();
                DeltaThreadFolder.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 15:
              if (field.Type == TType.Struct) {
                DeltaRTCEventLog = new MNMessagesSyncDeltaRTCEventLog();
                DeltaRTCEventLog.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 16:
              if (field.Type == TType.Struct) {
                DeltaVideoCall = new MNMessagesSyncDeltaVideoCall();
                DeltaVideoCall.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 17:
              if (field.Type == TType.Struct) {
                DeltaAdminTextMessage = new MNMessagesSyncDeltaAdminTextMessage();
                DeltaAdminTextMessage.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 18:
              if (field.Type == TType.Struct) {
                DeltaForcedFetch = new MNMessagesSyncDeltaForcedFetch();
                DeltaForcedFetch.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 19:
              if (field.Type == TType.Struct) {
                DeltaReadReceipt = new MNMessagesSyncDeltaReadReceipt();
                DeltaReadReceipt.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 20:
              if (field.Type == TType.Struct) {
                DeltaBroadcastMessage = new MNMessagesSyncDeltaBroadcastMessage();
                DeltaBroadcastMessage.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 21:
              if (field.Type == TType.Struct) {
                DeltaMarkFolderSeen = new MNMessagesSyncDeltaMarkFolderSeen();
                DeltaMarkFolderSeen.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 22:
              if (field.Type == TType.Struct) {
                DeltaSentMessage = new MNMessagesSyncDeltaSentMessage();
                DeltaSentMessage.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 23:
              if (field.Type == TType.Struct) {
                DeltaPinnedGroups = new MNMessagesSyncDeltaPinnedGroups();
                DeltaPinnedGroups.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 24:
              if (field.Type == TType.Struct) {
                DeltaPageAdminReply = new MNMessagesSyncDeltaPageAdminReply();
                DeltaPageAdminReply.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 25:
              if (field.Type == TType.Struct) {
                DeltaDeliveryReceipt = new MNMessagesSyncDeltaDeliveryReceipt();
                DeltaDeliveryReceipt.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 26:
              if (field.Type == TType.Struct) {
                DeltaP2PPaymentMessage = new MNMessagesSyncDeltaP2PPaymentMessage();
                DeltaP2PPaymentMessage.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 27:
              if (field.Type == TType.Struct) {
                DeltaFolderCount = new MNMessagesSyncDeltaFolderCount();
                DeltaFolderCount.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 28:
              if (field.Type == TType.Struct) {
                DeltaPagesManagerEvent = new MNMessagesSyncDeltaPagesManagerEvent();
                DeltaPagesManagerEvent.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 29:
              if (field.Type == TType.Struct) {
                DeltaNotificationSettings = new MNMessagesSyncDeltaNotificationSettings();
                DeltaNotificationSettings.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 30:
              if (field.Type == TType.Struct) {
                DeltaReplaceMessage = new MNMessagesSyncDeltaReplaceMessage();
                DeltaReplaceMessage.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 31:
              if (field.Type == TType.Struct) {
                DeltaZeroRating = new MNMessagesSyncDeltaZeroRating();
                DeltaZeroRating.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("MNMessagesSyncDeltaWrapper");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (DeltaNoOp != null && __isset.DeltaNoOp) {
          field.Name = "DeltaNoOp";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          DeltaNoOp.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (DeltaNewMessage != null && __isset.DeltaNewMessage) {
          field.Name = "DeltaNewMessage";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          DeltaNewMessage.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (DeltaNewGroupThread != null && __isset.DeltaNewGroupThread) {
          field.Name = "DeltaNewGroupThread";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          DeltaNewGroupThread.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (DeltaMarkRead != null && __isset.DeltaMarkRead) {
          field.Name = "DeltaMarkRead";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          DeltaMarkRead.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (DeltaMarkUnread != null && __isset.DeltaMarkUnread) {
          field.Name = "DeltaMarkUnread";
          field.Type = TType.Struct;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          DeltaMarkUnread.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (DeltaMessageDelete != null && __isset.DeltaMessageDelete) {
          field.Name = "DeltaMessageDelete";
          field.Type = TType.Struct;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          DeltaMessageDelete.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (DeltaThreadDelete != null && __isset.DeltaThreadDelete) {
          field.Name = "DeltaThreadDelete";
          field.Type = TType.Struct;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          DeltaThreadDelete.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (DeltaParticipantsAddedToGroupThread != null && __isset.DeltaParticipantsAddedToGroupThread) {
          field.Name = "DeltaParticipantsAddedToGroupThread";
          field.Type = TType.Struct;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          DeltaParticipantsAddedToGroupThread.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (DeltaParticipantLeftGroupThread != null && __isset.DeltaParticipantLeftGroupThread) {
          field.Name = "DeltaParticipantLeftGroupThread";
          field.Type = TType.Struct;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          DeltaParticipantLeftGroupThread.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (DeltaThreadName != null && __isset.DeltaThreadName) {
          field.Name = "DeltaThreadName";
          field.Type = TType.Struct;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          DeltaThreadName.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (DeltaThreadImage != null && __isset.DeltaThreadImage) {
          field.Name = "DeltaThreadImage";
          field.Type = TType.Struct;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          DeltaThreadImage.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (DeltaThreadMuteSettings != null && __isset.DeltaThreadMuteSettings) {
          field.Name = "DeltaThreadMuteSettings";
          field.Type = TType.Struct;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          DeltaThreadMuteSettings.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (DeltaThreadAction != null && __isset.DeltaThreadAction) {
          field.Name = "DeltaThreadAction";
          field.Type = TType.Struct;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          DeltaThreadAction.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (DeltaThreadFolder != null && __isset.DeltaThreadFolder) {
          field.Name = "DeltaThreadFolder";
          field.Type = TType.Struct;
          field.ID = 14;
          oprot.WriteFieldBegin(field);
          DeltaThreadFolder.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (DeltaRTCEventLog != null && __isset.DeltaRTCEventLog) {
          field.Name = "DeltaRTCEventLog";
          field.Type = TType.Struct;
          field.ID = 15;
          oprot.WriteFieldBegin(field);
          DeltaRTCEventLog.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (DeltaVideoCall != null && __isset.DeltaVideoCall) {
          field.Name = "DeltaVideoCall";
          field.Type = TType.Struct;
          field.ID = 16;
          oprot.WriteFieldBegin(field);
          DeltaVideoCall.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (DeltaAdminTextMessage != null && __isset.DeltaAdminTextMessage) {
          field.Name = "DeltaAdminTextMessage";
          field.Type = TType.Struct;
          field.ID = 17;
          oprot.WriteFieldBegin(field);
          DeltaAdminTextMessage.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (DeltaForcedFetch != null && __isset.DeltaForcedFetch) {
          field.Name = "DeltaForcedFetch";
          field.Type = TType.Struct;
          field.ID = 18;
          oprot.WriteFieldBegin(field);
          DeltaForcedFetch.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (DeltaReadReceipt != null && __isset.DeltaReadReceipt) {
          field.Name = "DeltaReadReceipt";
          field.Type = TType.Struct;
          field.ID = 19;
          oprot.WriteFieldBegin(field);
          DeltaReadReceipt.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (DeltaBroadcastMessage != null && __isset.DeltaBroadcastMessage) {
          field.Name = "DeltaBroadcastMessage";
          field.Type = TType.Struct;
          field.ID = 20;
          oprot.WriteFieldBegin(field);
          DeltaBroadcastMessage.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (DeltaMarkFolderSeen != null && __isset.DeltaMarkFolderSeen) {
          field.Name = "DeltaMarkFolderSeen";
          field.Type = TType.Struct;
          field.ID = 21;
          oprot.WriteFieldBegin(field);
          DeltaMarkFolderSeen.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (DeltaSentMessage != null && __isset.DeltaSentMessage) {
          field.Name = "DeltaSentMessage";
          field.Type = TType.Struct;
          field.ID = 22;
          oprot.WriteFieldBegin(field);
          DeltaSentMessage.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (DeltaPinnedGroups != null && __isset.DeltaPinnedGroups) {
          field.Name = "DeltaPinnedGroups";
          field.Type = TType.Struct;
          field.ID = 23;
          oprot.WriteFieldBegin(field);
          DeltaPinnedGroups.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (DeltaPageAdminReply != null && __isset.DeltaPageAdminReply) {
          field.Name = "DeltaPageAdminReply";
          field.Type = TType.Struct;
          field.ID = 24;
          oprot.WriteFieldBegin(field);
          DeltaPageAdminReply.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (DeltaDeliveryReceipt != null && __isset.DeltaDeliveryReceipt) {
          field.Name = "DeltaDeliveryReceipt";
          field.Type = TType.Struct;
          field.ID = 25;
          oprot.WriteFieldBegin(field);
          DeltaDeliveryReceipt.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (DeltaP2PPaymentMessage != null && __isset.DeltaP2PPaymentMessage) {
          field.Name = "DeltaP2PPaymentMessage";
          field.Type = TType.Struct;
          field.ID = 26;
          oprot.WriteFieldBegin(field);
          DeltaP2PPaymentMessage.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (DeltaFolderCount != null && __isset.DeltaFolderCount) {
          field.Name = "DeltaFolderCount";
          field.Type = TType.Struct;
          field.ID = 27;
          oprot.WriteFieldBegin(field);
          DeltaFolderCount.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (DeltaPagesManagerEvent != null && __isset.DeltaPagesManagerEvent) {
          field.Name = "DeltaPagesManagerEvent";
          field.Type = TType.Struct;
          field.ID = 28;
          oprot.WriteFieldBegin(field);
          DeltaPagesManagerEvent.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (DeltaNotificationSettings != null && __isset.DeltaNotificationSettings) {
          field.Name = "DeltaNotificationSettings";
          field.Type = TType.Struct;
          field.ID = 29;
          oprot.WriteFieldBegin(field);
          DeltaNotificationSettings.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (DeltaReplaceMessage != null && __isset.DeltaReplaceMessage) {
          field.Name = "DeltaReplaceMessage";
          field.Type = TType.Struct;
          field.ID = 30;
          oprot.WriteFieldBegin(field);
          DeltaReplaceMessage.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (DeltaZeroRating != null && __isset.DeltaZeroRating) {
          field.Name = "DeltaZeroRating";
          field.Type = TType.Struct;
          field.ID = 31;
          oprot.WriteFieldBegin(field);
          DeltaZeroRating.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("MNMessagesSyncDeltaWrapper(");
      bool __first = true;
      if (DeltaNoOp != null && __isset.DeltaNoOp) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeltaNoOp: ");
        __sb.Append(DeltaNoOp== null ? "<null>" : DeltaNoOp.ToString());
      }
      if (DeltaNewMessage != null && __isset.DeltaNewMessage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeltaNewMessage: ");
        __sb.Append(DeltaNewMessage== null ? "<null>" : DeltaNewMessage.ToString());
      }
      if (DeltaNewGroupThread != null && __isset.DeltaNewGroupThread) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeltaNewGroupThread: ");
        __sb.Append(DeltaNewGroupThread== null ? "<null>" : DeltaNewGroupThread.ToString());
      }
      if (DeltaMarkRead != null && __isset.DeltaMarkRead) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeltaMarkRead: ");
        __sb.Append(DeltaMarkRead== null ? "<null>" : DeltaMarkRead.ToString());
      }
      if (DeltaMarkUnread != null && __isset.DeltaMarkUnread) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeltaMarkUnread: ");
        __sb.Append(DeltaMarkUnread== null ? "<null>" : DeltaMarkUnread.ToString());
      }
      if (DeltaMessageDelete != null && __isset.DeltaMessageDelete) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeltaMessageDelete: ");
        __sb.Append(DeltaMessageDelete== null ? "<null>" : DeltaMessageDelete.ToString());
      }
      if (DeltaThreadDelete != null && __isset.DeltaThreadDelete) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeltaThreadDelete: ");
        __sb.Append(DeltaThreadDelete== null ? "<null>" : DeltaThreadDelete.ToString());
      }
      if (DeltaParticipantsAddedToGroupThread != null && __isset.DeltaParticipantsAddedToGroupThread) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeltaParticipantsAddedToGroupThread: ");
        __sb.Append(DeltaParticipantsAddedToGroupThread== null ? "<null>" : DeltaParticipantsAddedToGroupThread.ToString());
      }
      if (DeltaParticipantLeftGroupThread != null && __isset.DeltaParticipantLeftGroupThread) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeltaParticipantLeftGroupThread: ");
        __sb.Append(DeltaParticipantLeftGroupThread== null ? "<null>" : DeltaParticipantLeftGroupThread.ToString());
      }
      if (DeltaThreadName != null && __isset.DeltaThreadName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeltaThreadName: ");
        __sb.Append(DeltaThreadName== null ? "<null>" : DeltaThreadName.ToString());
      }
      if (DeltaThreadImage != null && __isset.DeltaThreadImage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeltaThreadImage: ");
        __sb.Append(DeltaThreadImage== null ? "<null>" : DeltaThreadImage.ToString());
      }
      if (DeltaThreadMuteSettings != null && __isset.DeltaThreadMuteSettings) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeltaThreadMuteSettings: ");
        __sb.Append(DeltaThreadMuteSettings== null ? "<null>" : DeltaThreadMuteSettings.ToString());
      }
      if (DeltaThreadAction != null && __isset.DeltaThreadAction) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeltaThreadAction: ");
        __sb.Append(DeltaThreadAction== null ? "<null>" : DeltaThreadAction.ToString());
      }
      if (DeltaThreadFolder != null && __isset.DeltaThreadFolder) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeltaThreadFolder: ");
        __sb.Append(DeltaThreadFolder== null ? "<null>" : DeltaThreadFolder.ToString());
      }
      if (DeltaRTCEventLog != null && __isset.DeltaRTCEventLog) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeltaRTCEventLog: ");
        __sb.Append(DeltaRTCEventLog== null ? "<null>" : DeltaRTCEventLog.ToString());
      }
      if (DeltaVideoCall != null && __isset.DeltaVideoCall) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeltaVideoCall: ");
        __sb.Append(DeltaVideoCall== null ? "<null>" : DeltaVideoCall.ToString());
      }
      if (DeltaAdminTextMessage != null && __isset.DeltaAdminTextMessage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeltaAdminTextMessage: ");
        __sb.Append(DeltaAdminTextMessage== null ? "<null>" : DeltaAdminTextMessage.ToString());
      }
      if (DeltaForcedFetch != null && __isset.DeltaForcedFetch) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeltaForcedFetch: ");
        __sb.Append(DeltaForcedFetch== null ? "<null>" : DeltaForcedFetch.ToString());
      }
      if (DeltaReadReceipt != null && __isset.DeltaReadReceipt) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeltaReadReceipt: ");
        __sb.Append(DeltaReadReceipt== null ? "<null>" : DeltaReadReceipt.ToString());
      }
      if (DeltaBroadcastMessage != null && __isset.DeltaBroadcastMessage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeltaBroadcastMessage: ");
        __sb.Append(DeltaBroadcastMessage== null ? "<null>" : DeltaBroadcastMessage.ToString());
      }
      if (DeltaMarkFolderSeen != null && __isset.DeltaMarkFolderSeen) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeltaMarkFolderSeen: ");
        __sb.Append(DeltaMarkFolderSeen== null ? "<null>" : DeltaMarkFolderSeen.ToString());
      }
      if (DeltaSentMessage != null && __isset.DeltaSentMessage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeltaSentMessage: ");
        __sb.Append(DeltaSentMessage== null ? "<null>" : DeltaSentMessage.ToString());
      }
      if (DeltaPinnedGroups != null && __isset.DeltaPinnedGroups) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeltaPinnedGroups: ");
        __sb.Append(DeltaPinnedGroups== null ? "<null>" : DeltaPinnedGroups.ToString());
      }
      if (DeltaPageAdminReply != null && __isset.DeltaPageAdminReply) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeltaPageAdminReply: ");
        __sb.Append(DeltaPageAdminReply== null ? "<null>" : DeltaPageAdminReply.ToString());
      }
      if (DeltaDeliveryReceipt != null && __isset.DeltaDeliveryReceipt) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeltaDeliveryReceipt: ");
        __sb.Append(DeltaDeliveryReceipt== null ? "<null>" : DeltaDeliveryReceipt.ToString());
      }
      if (DeltaP2PPaymentMessage != null && __isset.DeltaP2PPaymentMessage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeltaP2PPaymentMessage: ");
        __sb.Append(DeltaP2PPaymentMessage== null ? "<null>" : DeltaP2PPaymentMessage.ToString());
      }
      if (DeltaFolderCount != null && __isset.DeltaFolderCount) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeltaFolderCount: ");
        __sb.Append(DeltaFolderCount== null ? "<null>" : DeltaFolderCount.ToString());
      }
      if (DeltaPagesManagerEvent != null && __isset.DeltaPagesManagerEvent) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeltaPagesManagerEvent: ");
        __sb.Append(DeltaPagesManagerEvent== null ? "<null>" : DeltaPagesManagerEvent.ToString());
      }
      if (DeltaNotificationSettings != null && __isset.DeltaNotificationSettings) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeltaNotificationSettings: ");
        __sb.Append(DeltaNotificationSettings== null ? "<null>" : DeltaNotificationSettings.ToString());
      }
      if (DeltaReplaceMessage != null && __isset.DeltaReplaceMessage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeltaReplaceMessage: ");
        __sb.Append(DeltaReplaceMessage== null ? "<null>" : DeltaReplaceMessage.ToString());
      }
      if (DeltaZeroRating != null && __isset.DeltaZeroRating) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeltaZeroRating: ");
        __sb.Append(DeltaZeroRating== null ? "<null>" : DeltaZeroRating.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
