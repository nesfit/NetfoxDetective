// Copyright (c) 2017 Jan Pluskal, Viliam Letavay
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System;
using System.Collections.Generic;
using System.Text;
using Thrift.Protocol;

namespace Netfox.Snoopers.SnooperMessenger.Protocol
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ClientInfo : TBase
  {
    private long _UserId;
    private string _UserAgent;
    private long _ClientCapabilities;
    private long _EndpointCapabilities;
    private int _PublishFormat;
    private bool _NoAutomaticForeground;
    private bool _MakeUserAvailableInForeground;
    private string _DeviceId;
    private bool _IsInitiallyForeground;
    private int _NetworkType;
    private int _NetworkSubtype;
    private long _ClientMqttSessionId;
    private string _ClientIpAddress;
    private List<int> _SubscribeTopics;
    private string _ClientType;
    private long _AppId;
    private bool _OverrideNectarLogging;
    private byte[] _ConnectTokenHash;
    private string _RegionPreference;
    private string _DeviceSecret;
    private sbyte _ClientStack;

    public long UserId
    {
      get
      {
        return _UserId;
      }
      set
      {
        __isset.UserId = true;
        this._UserId = value;
      }
    }

    public string UserAgent
    {
      get
      {
        return _UserAgent;
      }
      set
      {
        __isset.UserAgent = true;
        this._UserAgent = value;
      }
    }

    public long ClientCapabilities
    {
      get
      {
        return _ClientCapabilities;
      }
      set
      {
        __isset.ClientCapabilities = true;
        this._ClientCapabilities = value;
      }
    }

    public long EndpointCapabilities
    {
      get
      {
        return _EndpointCapabilities;
      }
      set
      {
        __isset.EndpointCapabilities = true;
        this._EndpointCapabilities = value;
      }
    }

    public int PublishFormat
    {
      get
      {
        return _PublishFormat;
      }
      set
      {
        __isset.PublishFormat = true;
        this._PublishFormat = value;
      }
    }

    public bool NoAutomaticForeground
    {
      get
      {
        return _NoAutomaticForeground;
      }
      set
      {
        __isset.NoAutomaticForeground = true;
        this._NoAutomaticForeground = value;
      }
    }

    public bool MakeUserAvailableInForeground
    {
      get
      {
        return _MakeUserAvailableInForeground;
      }
      set
      {
        __isset.MakeUserAvailableInForeground = true;
        this._MakeUserAvailableInForeground = value;
      }
    }

    public string DeviceId
    {
      get
      {
        return _DeviceId;
      }
      set
      {
        __isset.DeviceId = true;
        this._DeviceId = value;
      }
    }

    public bool IsInitiallyForeground
    {
      get
      {
        return _IsInitiallyForeground;
      }
      set
      {
        __isset.IsInitiallyForeground = true;
        this._IsInitiallyForeground = value;
      }
    }

    public int NetworkType
    {
      get
      {
        return _NetworkType;
      }
      set
      {
        __isset.NetworkType = true;
        this._NetworkType = value;
      }
    }

    public int NetworkSubtype
    {
      get
      {
        return _NetworkSubtype;
      }
      set
      {
        __isset.NetworkSubtype = true;
        this._NetworkSubtype = value;
      }
    }

    public long ClientMqttSessionId
    {
      get
      {
        return _ClientMqttSessionId;
      }
      set
      {
        __isset.ClientMqttSessionId = true;
        this._ClientMqttSessionId = value;
      }
    }

    public string ClientIpAddress
    {
      get
      {
        return _ClientIpAddress;
      }
      set
      {
        __isset.ClientIpAddress = true;
        this._ClientIpAddress = value;
      }
    }

    public List<int> SubscribeTopics
    {
      get
      {
        return _SubscribeTopics;
      }
      set
      {
        __isset.SubscribeTopics = true;
        this._SubscribeTopics = value;
      }
    }

    public string ClientType
    {
      get
      {
        return _ClientType;
      }
      set
      {
        __isset.ClientType = true;
        this._ClientType = value;
      }
    }

    public long AppId
    {
      get
      {
        return _AppId;
      }
      set
      {
        __isset.AppId = true;
        this._AppId = value;
      }
    }

    public bool OverrideNectarLogging
    {
      get
      {
        return _OverrideNectarLogging;
      }
      set
      {
        __isset.OverrideNectarLogging = true;
        this._OverrideNectarLogging = value;
      }
    }

    public byte[] ConnectTokenHash
    {
      get
      {
        return _ConnectTokenHash;
      }
      set
      {
        __isset.ConnectTokenHash = true;
        this._ConnectTokenHash = value;
      }
    }

    public string RegionPreference
    {
      get
      {
        return _RegionPreference;
      }
      set
      {
        __isset.RegionPreference = true;
        this._RegionPreference = value;
      }
    }

    public string DeviceSecret
    {
      get
      {
        return _DeviceSecret;
      }
      set
      {
        __isset.DeviceSecret = true;
        this._DeviceSecret = value;
      }
    }

    public sbyte ClientStack
    {
      get
      {
        return _ClientStack;
      }
      set
      {
        __isset.ClientStack = true;
        this._ClientStack = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool UserId;
      public bool UserAgent;
      public bool ClientCapabilities;
      public bool EndpointCapabilities;
      public bool PublishFormat;
      public bool NoAutomaticForeground;
      public bool MakeUserAvailableInForeground;
      public bool DeviceId;
      public bool IsInitiallyForeground;
      public bool NetworkType;
      public bool NetworkSubtype;
      public bool ClientMqttSessionId;
      public bool ClientIpAddress;
      public bool SubscribeTopics;
      public bool ClientType;
      public bool AppId;
      public bool OverrideNectarLogging;
      public bool ConnectTokenHash;
      public bool RegionPreference;
      public bool DeviceSecret;
      public bool ClientStack;
    }

    public ClientInfo() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                UserId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                UserAgent = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                ClientCapabilities = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                EndpointCapabilities = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                PublishFormat = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Bool) {
                NoAutomaticForeground = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Bool) {
                MakeUserAvailableInForeground = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                DeviceId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.Bool) {
                IsInitiallyForeground = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.I32) {
                NetworkType = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.I32) {
                NetworkSubtype = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.I64) {
                ClientMqttSessionId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.String) {
                ClientIpAddress = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 14:
              if (field.Type == TType.List) {
                {
                  SubscribeTopics = new List<int>();
                  TList _list14 = iprot.ReadListBegin();
                  for( int _i15 = 0; _i15 < _list14.Count; ++_i15)
                  {
                    int _elem16;
                    _elem16 = iprot.ReadI32();
                    SubscribeTopics.Add(_elem16);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 15:
              if (field.Type == TType.String) {
                ClientType = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 16:
              if (field.Type == TType.I64) {
                AppId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 17:
              if (field.Type == TType.Bool) {
                OverrideNectarLogging = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 18:
              if (field.Type == TType.String) {
                ConnectTokenHash = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 19:
              if (field.Type == TType.String) {
                RegionPreference = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 20:
              if (field.Type == TType.String) {
                DeviceSecret = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 21:
              if (field.Type == TType.Byte) {
                ClientStack = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ClientInfo");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.UserId) {
          field.Name = "UserId";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(UserId);
          oprot.WriteFieldEnd();
        }
        if (UserAgent != null && __isset.UserAgent) {
          field.Name = "UserAgent";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserAgent);
          oprot.WriteFieldEnd();
        }
        if (__isset.ClientCapabilities) {
          field.Name = "ClientCapabilities";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(ClientCapabilities);
          oprot.WriteFieldEnd();
        }
        if (__isset.EndpointCapabilities) {
          field.Name = "EndpointCapabilities";
          field.Type = TType.I64;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(EndpointCapabilities);
          oprot.WriteFieldEnd();
        }
        if (__isset.PublishFormat) {
          field.Name = "PublishFormat";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PublishFormat);
          oprot.WriteFieldEnd();
        }
        if (__isset.NoAutomaticForeground) {
          field.Name = "NoAutomaticForeground";
          field.Type = TType.Bool;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(NoAutomaticForeground);
          oprot.WriteFieldEnd();
        }
        if (__isset.MakeUserAvailableInForeground) {
          field.Name = "MakeUserAvailableInForeground";
          field.Type = TType.Bool;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(MakeUserAvailableInForeground);
          oprot.WriteFieldEnd();
        }
        if (DeviceId != null && __isset.DeviceId) {
          field.Name = "DeviceId";
          field.Type = TType.String;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DeviceId);
          oprot.WriteFieldEnd();
        }
        if (__isset.IsInitiallyForeground) {
          field.Name = "IsInitiallyForeground";
          field.Type = TType.Bool;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IsInitiallyForeground);
          oprot.WriteFieldEnd();
        }
        if (__isset.NetworkType) {
          field.Name = "NetworkType";
          field.Type = TType.I32;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NetworkType);
          oprot.WriteFieldEnd();
        }
        if (__isset.NetworkSubtype) {
          field.Name = "NetworkSubtype";
          field.Type = TType.I32;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NetworkSubtype);
          oprot.WriteFieldEnd();
        }
        if (__isset.ClientMqttSessionId) {
          field.Name = "ClientMqttSessionId";
          field.Type = TType.I64;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(ClientMqttSessionId);
          oprot.WriteFieldEnd();
        }
        if (ClientIpAddress != null && __isset.ClientIpAddress) {
          field.Name = "ClientIpAddress";
          field.Type = TType.String;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ClientIpAddress);
          oprot.WriteFieldEnd();
        }
        if (SubscribeTopics != null && __isset.SubscribeTopics) {
          field.Name = "SubscribeTopics";
          field.Type = TType.List;
          field.ID = 14;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, SubscribeTopics.Count));
            foreach (int _iter17 in SubscribeTopics)
            {
              oprot.WriteI32(_iter17);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (ClientType != null && __isset.ClientType) {
          field.Name = "ClientType";
          field.Type = TType.String;
          field.ID = 15;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ClientType);
          oprot.WriteFieldEnd();
        }
        if (__isset.AppId) {
          field.Name = "AppId";
          field.Type = TType.I64;
          field.ID = 16;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(AppId);
          oprot.WriteFieldEnd();
        }
        if (__isset.OverrideNectarLogging) {
          field.Name = "OverrideNectarLogging";
          field.Type = TType.Bool;
          field.ID = 17;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(OverrideNectarLogging);
          oprot.WriteFieldEnd();
        }
        if (ConnectTokenHash != null && __isset.ConnectTokenHash) {
          field.Name = "ConnectTokenHash";
          field.Type = TType.String;
          field.ID = 18;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(ConnectTokenHash);
          oprot.WriteFieldEnd();
        }
        if (RegionPreference != null && __isset.RegionPreference) {
          field.Name = "RegionPreference";
          field.Type = TType.String;
          field.ID = 19;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(RegionPreference);
          oprot.WriteFieldEnd();
        }
        if (DeviceSecret != null && __isset.DeviceSecret) {
          field.Name = "DeviceSecret";
          field.Type = TType.String;
          field.ID = 20;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DeviceSecret);
          oprot.WriteFieldEnd();
        }
        if (__isset.ClientStack) {
          field.Name = "ClientStack";
          field.Type = TType.Byte;
          field.ID = 21;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(ClientStack);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ClientInfo(");
      bool __first = true;
      if (__isset.UserId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserId: ");
        __sb.Append(UserId);
      }
      if (UserAgent != null && __isset.UserAgent) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserAgent: ");
        __sb.Append(UserAgent);
      }
      if (__isset.ClientCapabilities) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ClientCapabilities: ");
        __sb.Append(ClientCapabilities);
      }
      if (__isset.EndpointCapabilities) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("EndpointCapabilities: ");
        __sb.Append(EndpointCapabilities);
      }
      if (__isset.PublishFormat) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PublishFormat: ");
        __sb.Append(PublishFormat);
      }
      if (__isset.NoAutomaticForeground) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NoAutomaticForeground: ");
        __sb.Append(NoAutomaticForeground);
      }
      if (__isset.MakeUserAvailableInForeground) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MakeUserAvailableInForeground: ");
        __sb.Append(MakeUserAvailableInForeground);
      }
      if (DeviceId != null && __isset.DeviceId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeviceId: ");
        __sb.Append(DeviceId);
      }
      if (__isset.IsInitiallyForeground) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IsInitiallyForeground: ");
        __sb.Append(IsInitiallyForeground);
      }
      if (__isset.NetworkType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NetworkType: ");
        __sb.Append(NetworkType);
      }
      if (__isset.NetworkSubtype) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NetworkSubtype: ");
        __sb.Append(NetworkSubtype);
      }
      if (__isset.ClientMqttSessionId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ClientMqttSessionId: ");
        __sb.Append(ClientMqttSessionId);
      }
      if (ClientIpAddress != null && __isset.ClientIpAddress) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ClientIpAddress: ");
        __sb.Append(ClientIpAddress);
      }
      if (SubscribeTopics != null && __isset.SubscribeTopics) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SubscribeTopics: ");
        __sb.Append(SubscribeTopics);
      }
      if (ClientType != null && __isset.ClientType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ClientType: ");
        __sb.Append(ClientType);
      }
      if (__isset.AppId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AppId: ");
        __sb.Append(AppId);
      }
      if (__isset.OverrideNectarLogging) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("OverrideNectarLogging: ");
        __sb.Append(OverrideNectarLogging);
      }
      if (ConnectTokenHash != null && __isset.ConnectTokenHash) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ConnectTokenHash: ");
        __sb.Append(ConnectTokenHash);
      }
      if (RegionPreference != null && __isset.RegionPreference) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RegionPreference: ");
        __sb.Append(RegionPreference);
      }
      if (DeviceSecret != null && __isset.DeviceSecret) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeviceSecret: ");
        __sb.Append(DeviceSecret);
      }
      if (__isset.ClientStack) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ClientStack: ");
        __sb.Append(ClientStack);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
