// Copyright (c) 2017 Jan Pluskal, Viliam Letavay
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System;
using System.Collections.Generic;
using System.Text;
using Thrift.Protocol;

namespace Netfox.Snoopers.SnooperMessenger.Protocol
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class MNMessagesSyncParticipantInfo : TBase
  {
    private long _UserFbId;
    private string _FirstName;
    private string _FullName;
    private bool _IsMessengerUser;
    private Dictionary<int, string> _ProfPicURIMap;

    public long UserFbId
    {
      get
      {
        return _UserFbId;
      }
      set
      {
        __isset.UserFbId = true;
        this._UserFbId = value;
      }
    }

    public string FirstName
    {
      get
      {
        return _FirstName;
      }
      set
      {
        __isset.FirstName = true;
        this._FirstName = value;
      }
    }

    public string FullName
    {
      get
      {
        return _FullName;
      }
      set
      {
        __isset.FullName = true;
        this._FullName = value;
      }
    }

    public bool IsMessengerUser
    {
      get
      {
        return _IsMessengerUser;
      }
      set
      {
        __isset.IsMessengerUser = true;
        this._IsMessengerUser = value;
      }
    }

    public Dictionary<int, string> ProfPicURIMap
    {
      get
      {
        return _ProfPicURIMap;
      }
      set
      {
        __isset.ProfPicURIMap = true;
        this._ProfPicURIMap = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool UserFbId;
      public bool FirstName;
      public bool FullName;
      public bool IsMessengerUser;
      public bool ProfPicURIMap;
    }

    public MNMessagesSyncParticipantInfo() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                UserFbId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                FirstName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                FullName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Bool) {
                IsMessengerUser = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Map) {
                {
                  ProfPicURIMap = new Dictionary<int, string>();
                  TMap _map30 = iprot.ReadMapBegin();
                  for( int _i31 = 0; _i31 < _map30.Count; ++_i31)
                  {
                    int _key32;
                    string _val33;
                    _key32 = iprot.ReadI32();
                    _val33 = iprot.ReadString();
                    ProfPicURIMap[_key32] = _val33;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("MNMessagesSyncParticipantInfo");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.UserFbId) {
          field.Name = "UserFbId";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(UserFbId);
          oprot.WriteFieldEnd();
        }
        if (FirstName != null && __isset.FirstName) {
          field.Name = "FirstName";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(FirstName);
          oprot.WriteFieldEnd();
        }
        if (FullName != null && __isset.FullName) {
          field.Name = "FullName";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(FullName);
          oprot.WriteFieldEnd();
        }
        if (__isset.IsMessengerUser) {
          field.Name = "IsMessengerUser";
          field.Type = TType.Bool;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IsMessengerUser);
          oprot.WriteFieldEnd();
        }
        if (ProfPicURIMap != null && __isset.ProfPicURIMap) {
          field.Name = "ProfPicURIMap";
          field.Type = TType.Map;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.I32, TType.String, ProfPicURIMap.Count));
            foreach (int _iter34 in ProfPicURIMap.Keys)
            {
              oprot.WriteI32(_iter34);
              oprot.WriteString(ProfPicURIMap[_iter34]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("MNMessagesSyncParticipantInfo(");
      bool __first = true;
      if (__isset.UserFbId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserFbId: ");
        __sb.Append(UserFbId);
      }
      if (FirstName != null && __isset.FirstName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FirstName: ");
        __sb.Append(FirstName);
      }
      if (FullName != null && __isset.FullName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FullName: ");
        __sb.Append(FullName);
      }
      if (__isset.IsMessengerUser) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IsMessengerUser: ");
        __sb.Append(IsMessengerUser);
      }
      if (ProfPicURIMap != null && __isset.ProfPicURIMap) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ProfPicURIMap: ");
        __sb.Append(ProfPicURIMap);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
