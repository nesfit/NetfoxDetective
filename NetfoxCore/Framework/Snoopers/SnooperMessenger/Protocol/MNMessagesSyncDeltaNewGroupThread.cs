// Copyright (c) 2017 Jan Pluskal, Viliam Letavay
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System;
using System.Collections.Generic;
using System.Text;
using Thrift.Protocol;

namespace Netfox.Snoopers.SnooperMessenger.Protocol
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class MNMessagesSyncDeltaNewGroupThread : TBase
  {
    private MNMessagesSyncThreadKey _ThreadKey;
    private List<MNMessagesSyncParticipantInfo> _Participants;

    public MNMessagesSyncThreadKey ThreadKey
    {
      get
      {
        return _ThreadKey;
      }
      set
      {
        __isset.ThreadKey = true;
        this._ThreadKey = value;
      }
    }

    public List<MNMessagesSyncParticipantInfo> Participants
    {
      get
      {
        return _Participants;
      }
      set
      {
        __isset.Participants = true;
        this._Participants = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ThreadKey;
      public bool Participants;
    }

    public MNMessagesSyncDeltaNewGroupThread() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                ThreadKey = new MNMessagesSyncThreadKey();
                ThreadKey.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Participants = new List<MNMessagesSyncParticipantInfo>();
                  TList _list35 = iprot.ReadListBegin();
                  for( int _i36 = 0; _i36 < _list35.Count; ++_i36)
                  {
                    MNMessagesSyncParticipantInfo _elem37;
                    _elem37 = new MNMessagesSyncParticipantInfo();
                    _elem37.Read(iprot);
                    Participants.Add(_elem37);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("MNMessagesSyncDeltaNewGroupThread");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ThreadKey != null && __isset.ThreadKey) {
          field.Name = "ThreadKey";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          ThreadKey.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Participants != null && __isset.Participants) {
          field.Name = "Participants";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Participants.Count));
            foreach (MNMessagesSyncParticipantInfo _iter38 in Participants)
            {
              _iter38.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("MNMessagesSyncDeltaNewGroupThread(");
      bool __first = true;
      if (ThreadKey != null && __isset.ThreadKey) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ThreadKey: ");
        __sb.Append(ThreadKey== null ? "<null>" : ThreadKey.ToString());
      }
      if (Participants != null && __isset.Participants) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Participants: ");
        __sb.Append(Participants);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
