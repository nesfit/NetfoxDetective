// Copyright (c) 2017 Jan Pluskal, Viliam Letavay
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System;
using System.Collections.Generic;
using System.Text;
using Thrift.Protocol;

namespace Netfox.Snoopers.SnooperMessenger.Protocol
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SendMessageRequest : TBase
  {
    private string _To;
    private string _Body;
    private long _OfflineThreadingID;
    private Coordinates _Coordinates;
    private Dictionary<string, string> _ClientTags;
    private string _ObjectAttachement;
    private string _CopyMessageID;
    private string _CopyAttachementID;
    private List<string> _MediaAttachementsID;
    private string _FBTraceMeta;
    private int _ImageType;
    private long _SenderFBID;
    private Dictionary<string, string> _BroadcastRecipients;
    private long _AtributionAppID;
    private string _iOSBundleID;
    private string _AndroidKeyHash;
    private LocationAttachement _LocationAttachement;

    public string To
    {
      get
      {
        return _To;
      }
      set
      {
        __isset.To = true;
        this._To = value;
      }
    }

    public string Body
    {
      get
      {
        return _Body;
      }
      set
      {
        __isset.Body = true;
        this._Body = value;
      }
    }

    public long OfflineThreadingID
    {
      get
      {
        return _OfflineThreadingID;
      }
      set
      {
        __isset.OfflineThreadingID = true;
        this._OfflineThreadingID = value;
      }
    }

    public Coordinates Coordinates
    {
      get
      {
        return _Coordinates;
      }
      set
      {
        __isset.Coordinates = true;
        this._Coordinates = value;
      }
    }

    public Dictionary<string, string> ClientTags
    {
      get
      {
        return _ClientTags;
      }
      set
      {
        __isset.ClientTags = true;
        this._ClientTags = value;
      }
    }

    public string ObjectAttachement
    {
      get
      {
        return _ObjectAttachement;
      }
      set
      {
        __isset.ObjectAttachement = true;
        this._ObjectAttachement = value;
      }
    }

    public string CopyMessageID
    {
      get
      {
        return _CopyMessageID;
      }
      set
      {
        __isset.CopyMessageID = true;
        this._CopyMessageID = value;
      }
    }

    public string CopyAttachementID
    {
      get
      {
        return _CopyAttachementID;
      }
      set
      {
        __isset.CopyAttachementID = true;
        this._CopyAttachementID = value;
      }
    }

    public List<string> MediaAttachementsID
    {
      get
      {
        return _MediaAttachementsID;
      }
      set
      {
        __isset.MediaAttachementsID = true;
        this._MediaAttachementsID = value;
      }
    }

    public string FBTraceMeta
    {
      get
      {
        return _FBTraceMeta;
      }
      set
      {
        __isset.FBTraceMeta = true;
        this._FBTraceMeta = value;
      }
    }

    public int ImageType
    {
      get
      {
        return _ImageType;
      }
      set
      {
        __isset.ImageType = true;
        this._ImageType = value;
      }
    }

    public long SenderFBID
    {
      get
      {
        return _SenderFBID;
      }
      set
      {
        __isset.SenderFBID = true;
        this._SenderFBID = value;
      }
    }

    public Dictionary<string, string> BroadcastRecipients
    {
      get
      {
        return _BroadcastRecipients;
      }
      set
      {
        __isset.BroadcastRecipients = true;
        this._BroadcastRecipients = value;
      }
    }

    public long AtributionAppID
    {
      get
      {
        return _AtributionAppID;
      }
      set
      {
        __isset.AtributionAppID = true;
        this._AtributionAppID = value;
      }
    }

    public string IOSBundleID
    {
      get
      {
        return _iOSBundleID;
      }
      set
      {
        __isset.iOSBundleID = true;
        this._iOSBundleID = value;
      }
    }

    public string AndroidKeyHash
    {
      get
      {
        return _AndroidKeyHash;
      }
      set
      {
        __isset.AndroidKeyHash = true;
        this._AndroidKeyHash = value;
      }
    }

    public LocationAttachement LocationAttachement
    {
      get
      {
        return _LocationAttachement;
      }
      set
      {
        __isset.LocationAttachement = true;
        this._LocationAttachement = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool To;
      public bool Body;
      public bool OfflineThreadingID;
      public bool Coordinates;
      public bool ClientTags;
      public bool ObjectAttachement;
      public bool CopyMessageID;
      public bool CopyAttachementID;
      public bool MediaAttachementsID;
      public bool FBTraceMeta;
      public bool ImageType;
      public bool SenderFBID;
      public bool BroadcastRecipients;
      public bool AtributionAppID;
      public bool iOSBundleID;
      public bool AndroidKeyHash;
      public bool LocationAttachement;
    }

    public SendMessageRequest() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                To = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Body = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                OfflineThreadingID = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                Coordinates = new Coordinates();
                Coordinates.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Map) {
                {
                  ClientTags = new Dictionary<string, string>();
                  TMap _map0 = iprot.ReadMapBegin();
                  for( int _i1 = 0; _i1 < _map0.Count; ++_i1)
                  {
                    string _key2;
                    string _val3;
                    _key2 = iprot.ReadString();
                    _val3 = iprot.ReadString();
                    ClientTags[_key2] = _val3;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                ObjectAttachement = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                CopyMessageID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                CopyAttachementID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.List) {
                {
                  MediaAttachementsID = new List<string>();
                  TList _list4 = iprot.ReadListBegin();
                  for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                  {
                    string _elem6;
                    _elem6 = iprot.ReadString();
                    MediaAttachementsID.Add(_elem6);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.String) {
                FBTraceMeta = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.I32) {
                ImageType = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.I64) {
                SenderFBID = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.Map) {
                {
                  BroadcastRecipients = new Dictionary<string, string>();
                  TMap _map7 = iprot.ReadMapBegin();
                  for( int _i8 = 0; _i8 < _map7.Count; ++_i8)
                  {
                    string _key9;
                    string _val10;
                    _key9 = iprot.ReadString();
                    _val10 = iprot.ReadString();
                    BroadcastRecipients[_key9] = _val10;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 14:
              if (field.Type == TType.I64) {
                AtributionAppID = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 15:
              if (field.Type == TType.String) {
                IOSBundleID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 16:
              if (field.Type == TType.String) {
                AndroidKeyHash = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 17:
              if (field.Type == TType.Struct) {
                LocationAttachement = new LocationAttachement();
                LocationAttachement.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("SendMessageRequest");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (To != null && __isset.To) {
          field.Name = "To";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(To);
          oprot.WriteFieldEnd();
        }
        if (Body != null && __isset.Body) {
          field.Name = "Body";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Body);
          oprot.WriteFieldEnd();
        }
        if (__isset.OfflineThreadingID) {
          field.Name = "OfflineThreadingID";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(OfflineThreadingID);
          oprot.WriteFieldEnd();
        }
        if (Coordinates != null && __isset.Coordinates) {
          field.Name = "Coordinates";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          Coordinates.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (ClientTags != null && __isset.ClientTags) {
          field.Name = "ClientTags";
          field.Type = TType.Map;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.String, ClientTags.Count));
            foreach (string _iter11 in ClientTags.Keys)
            {
              oprot.WriteString(_iter11);
              oprot.WriteString(ClientTags[_iter11]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (ObjectAttachement != null && __isset.ObjectAttachement) {
          field.Name = "ObjectAttachement";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ObjectAttachement);
          oprot.WriteFieldEnd();
        }
        if (CopyMessageID != null && __isset.CopyMessageID) {
          field.Name = "CopyMessageID";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CopyMessageID);
          oprot.WriteFieldEnd();
        }
        if (CopyAttachementID != null && __isset.CopyAttachementID) {
          field.Name = "CopyAttachementID";
          field.Type = TType.String;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CopyAttachementID);
          oprot.WriteFieldEnd();
        }
        if (MediaAttachementsID != null && __isset.MediaAttachementsID) {
          field.Name = "MediaAttachementsID";
          field.Type = TType.List;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, MediaAttachementsID.Count));
            foreach (string _iter12 in MediaAttachementsID)
            {
              oprot.WriteString(_iter12);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (FBTraceMeta != null && __isset.FBTraceMeta) {
          field.Name = "FBTraceMeta";
          field.Type = TType.String;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(FBTraceMeta);
          oprot.WriteFieldEnd();
        }
        if (__isset.ImageType) {
          field.Name = "ImageType";
          field.Type = TType.I32;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ImageType);
          oprot.WriteFieldEnd();
        }
        if (__isset.SenderFBID) {
          field.Name = "SenderFBID";
          field.Type = TType.I64;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SenderFBID);
          oprot.WriteFieldEnd();
        }
        if (BroadcastRecipients != null && __isset.BroadcastRecipients) {
          field.Name = "BroadcastRecipients";
          field.Type = TType.Map;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.String, BroadcastRecipients.Count));
            foreach (string _iter13 in BroadcastRecipients.Keys)
            {
              oprot.WriteString(_iter13);
              oprot.WriteString(BroadcastRecipients[_iter13]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.AtributionAppID) {
          field.Name = "AtributionAppID";
          field.Type = TType.I64;
          field.ID = 14;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(AtributionAppID);
          oprot.WriteFieldEnd();
        }
        if (IOSBundleID != null && __isset.iOSBundleID) {
          field.Name = "iOSBundleID";
          field.Type = TType.String;
          field.ID = 15;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(IOSBundleID);
          oprot.WriteFieldEnd();
        }
        if (AndroidKeyHash != null && __isset.AndroidKeyHash) {
          field.Name = "AndroidKeyHash";
          field.Type = TType.String;
          field.ID = 16;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(AndroidKeyHash);
          oprot.WriteFieldEnd();
        }
        if (LocationAttachement != null && __isset.LocationAttachement) {
          field.Name = "LocationAttachement";
          field.Type = TType.Struct;
          field.ID = 17;
          oprot.WriteFieldBegin(field);
          LocationAttachement.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("SendMessageRequest(");
      bool __first = true;
      if (To != null && __isset.To) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("To: ");
        __sb.Append(To);
      }
      if (Body != null && __isset.Body) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Body: ");
        __sb.Append(Body);
      }
      if (__isset.OfflineThreadingID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("OfflineThreadingID: ");
        __sb.Append(OfflineThreadingID);
      }
      if (Coordinates != null && __isset.Coordinates) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Coordinates: ");
        __sb.Append(Coordinates== null ? "<null>" : Coordinates.ToString());
      }
      if (ClientTags != null && __isset.ClientTags) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ClientTags: ");
        __sb.Append(ClientTags);
      }
      if (ObjectAttachement != null && __isset.ObjectAttachement) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ObjectAttachement: ");
        __sb.Append(ObjectAttachement);
      }
      if (CopyMessageID != null && __isset.CopyMessageID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CopyMessageID: ");
        __sb.Append(CopyMessageID);
      }
      if (CopyAttachementID != null && __isset.CopyAttachementID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CopyAttachementID: ");
        __sb.Append(CopyAttachementID);
      }
      if (MediaAttachementsID != null && __isset.MediaAttachementsID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MediaAttachementsID: ");
        __sb.Append(MediaAttachementsID);
      }
      if (FBTraceMeta != null && __isset.FBTraceMeta) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FBTraceMeta: ");
        __sb.Append(FBTraceMeta);
      }
      if (__isset.ImageType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ImageType: ");
        __sb.Append(ImageType);
      }
      if (__isset.SenderFBID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SenderFBID: ");
        __sb.Append(SenderFBID);
      }
      if (BroadcastRecipients != null && __isset.BroadcastRecipients) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("BroadcastRecipients: ");
        __sb.Append(BroadcastRecipients);
      }
      if (__isset.AtributionAppID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AtributionAppID: ");
        __sb.Append(AtributionAppID);
      }
      if (IOSBundleID != null && __isset.iOSBundleID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IOSBundleID: ");
        __sb.Append(IOSBundleID);
      }
      if (AndroidKeyHash != null && __isset.AndroidKeyHash) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AndroidKeyHash: ");
        __sb.Append(AndroidKeyHash);
      }
      if (LocationAttachement != null && __isset.LocationAttachement) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LocationAttachement: ");
        __sb.Append(LocationAttachement== null ? "<null>" : LocationAttachement.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
