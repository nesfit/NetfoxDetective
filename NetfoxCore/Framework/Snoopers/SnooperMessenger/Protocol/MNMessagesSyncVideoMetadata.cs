// Copyright (c) 2017 Jan Pluskal, Viliam Letavay
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System;
using System.Text;
using Thrift.Protocol;

namespace Netfox.Snoopers.SnooperMessenger.Protocol
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class MNMessagesSyncVideoMetadata : TBase
  {
    private int _Width;
    private int _Height;
    private int _DurationMs;
    private string _ThumbnailUri;
    private string _VideoUri;
    private int _Source;
    private int _Rotation;

    public int Width
    {
      get
      {
        return _Width;
      }
      set
      {
        __isset.Width = true;
        this._Width = value;
      }
    }

    public int Height
    {
      get
      {
        return _Height;
      }
      set
      {
        __isset.Height = true;
        this._Height = value;
      }
    }

    public int DurationMs
    {
      get
      {
        return _DurationMs;
      }
      set
      {
        __isset.DurationMs = true;
        this._DurationMs = value;
      }
    }

    public string ThumbnailUri
    {
      get
      {
        return _ThumbnailUri;
      }
      set
      {
        __isset.ThumbnailUri = true;
        this._ThumbnailUri = value;
      }
    }

    public string VideoUri
    {
      get
      {
        return _VideoUri;
      }
      set
      {
        __isset.VideoUri = true;
        this._VideoUri = value;
      }
    }

    public int Source
    {
      get
      {
        return _Source;
      }
      set
      {
        __isset.Source = true;
        this._Source = value;
      }
    }

    public int Rotation
    {
      get
      {
        return _Rotation;
      }
      set
      {
        __isset.Rotation = true;
        this._Rotation = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Width;
      public bool Height;
      public bool DurationMs;
      public bool ThumbnailUri;
      public bool VideoUri;
      public bool Source;
      public bool Rotation;
    }

    public MNMessagesSyncVideoMetadata() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Width = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Height = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                DurationMs = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                ThumbnailUri = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                VideoUri = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                Source = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I32) {
                Rotation = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("MNMessagesSyncVideoMetadata");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.Width) {
          field.Name = "Width";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Width);
          oprot.WriteFieldEnd();
        }
        if (__isset.Height) {
          field.Name = "Height";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Height);
          oprot.WriteFieldEnd();
        }
        if (__isset.DurationMs) {
          field.Name = "DurationMs";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(DurationMs);
          oprot.WriteFieldEnd();
        }
        if (ThumbnailUri != null && __isset.ThumbnailUri) {
          field.Name = "ThumbnailUri";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ThumbnailUri);
          oprot.WriteFieldEnd();
        }
        if (VideoUri != null && __isset.VideoUri) {
          field.Name = "VideoUri";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(VideoUri);
          oprot.WriteFieldEnd();
        }
        if (__isset.Source) {
          field.Name = "Source";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Source);
          oprot.WriteFieldEnd();
        }
        if (__isset.Rotation) {
          field.Name = "Rotation";
          field.Type = TType.I32;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Rotation);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("MNMessagesSyncVideoMetadata(");
      bool __first = true;
      if (__isset.Width) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Width: ");
        __sb.Append(Width);
      }
      if (__isset.Height) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Height: ");
        __sb.Append(Height);
      }
      if (__isset.DurationMs) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DurationMs: ");
        __sb.Append(DurationMs);
      }
      if (ThumbnailUri != null && __isset.ThumbnailUri) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ThumbnailUri: ");
        __sb.Append(ThumbnailUri);
      }
      if (VideoUri != null && __isset.VideoUri) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("VideoUri: ");
        __sb.Append(VideoUri);
      }
      if (__isset.Source) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Source: ");
        __sb.Append(Source);
      }
      if (__isset.Rotation) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Rotation: ");
        __sb.Append(Rotation);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
