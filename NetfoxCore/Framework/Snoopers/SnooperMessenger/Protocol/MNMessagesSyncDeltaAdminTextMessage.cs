// Copyright (c) 2017 Jan Pluskal, Viliam Letavay
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System;
using System.Collections.Generic;
using System.Text;
using Thrift.Protocol;

namespace Netfox.Snoopers.SnooperMessenger.Protocol
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class MNMessagesSyncDeltaAdminTextMessage : TBase
  {
    private MNMessagesSyncMessageMetadata _MessageMetadata;
    private string _Type;
    private Dictionary<string, string> _UntypedData;

    public MNMessagesSyncMessageMetadata MessageMetadata
    {
      get
      {
        return _MessageMetadata;
      }
      set
      {
        __isset.MessageMetadata = true;
        this._MessageMetadata = value;
      }
    }

    public string Type
    {
      get
      {
        return _Type;
      }
      set
      {
        __isset.Type = true;
        this._Type = value;
      }
    }

    public Dictionary<string, string> UntypedData
    {
      get
      {
        return _UntypedData;
      }
      set
      {
        __isset.UntypedData = true;
        this._UntypedData = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool MessageMetadata;
      public bool Type;
      public bool UntypedData;
    }

    public MNMessagesSyncDeltaAdminTextMessage() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                MessageMetadata = new MNMessagesSyncMessageMetadata();
                MessageMetadata.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Type = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Map) {
                {
                  UntypedData = new Dictionary<string, string>();
                  TMap _map82 = iprot.ReadMapBegin();
                  for( int _i83 = 0; _i83 < _map82.Count; ++_i83)
                  {
                    string _key84;
                    string _val85;
                    _key84 = iprot.ReadString();
                    _val85 = iprot.ReadString();
                    UntypedData[_key84] = _val85;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("MNMessagesSyncDeltaAdminTextMessage");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (MessageMetadata != null && __isset.MessageMetadata) {
          field.Name = "MessageMetadata";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          MessageMetadata.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Type != null && __isset.Type) {
          field.Name = "Type";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Type);
          oprot.WriteFieldEnd();
        }
        if (UntypedData != null && __isset.UntypedData) {
          field.Name = "UntypedData";
          field.Type = TType.Map;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.String, UntypedData.Count));
            foreach (string _iter86 in UntypedData.Keys)
            {
              oprot.WriteString(_iter86);
              oprot.WriteString(UntypedData[_iter86]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("MNMessagesSyncDeltaAdminTextMessage(");
      bool __first = true;
      if (MessageMetadata != null && __isset.MessageMetadata) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MessageMetadata: ");
        __sb.Append(MessageMetadata== null ? "<null>" : MessageMetadata.ToString());
      }
      if (Type != null && __isset.Type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Type: ");
        __sb.Append(Type);
      }
      if (UntypedData != null && __isset.UntypedData) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UntypedData: ");
        __sb.Append(UntypedData);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
