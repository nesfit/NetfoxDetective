// Copyright (c) 2017 Jan Pluskal, Viliam Letavay
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System;
using System.Collections.Generic;
using System.Text;
using Thrift.Protocol;

namespace Netfox.Snoopers.SnooperMessenger.Protocol
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class MNMessagesSyncDeltaNewMessage : TBase
  {
    private MNMessagesSyncMessageMetadata _MessageMetadata;
    private string _Body;
    private long _StickerId;
    private List<string> _Attachments;
    private int _Ttl;

    public MNMessagesSyncMessageMetadata MessageMetadata
    {
      get
      {
        return _MessageMetadata;
      }
      set
      {
        __isset.MessageMetadata = true;
        this._MessageMetadata = value;
      }
    }

    public string Body
    {
      get
      {
        return _Body;
      }
      set
      {
        __isset.Body = true;
        this._Body = value;
      }
    }

    public long StickerId
    {
      get
      {
        return _StickerId;
      }
      set
      {
        __isset.StickerId = true;
        this._StickerId = value;
      }
    }

    public List<string> Attachments
    {
      get
      {
        return _Attachments;
      }
      set
      {
        __isset.Attachments = true;
        this._Attachments = value;
      }
    }

    public int Ttl
    {
      get
      {
        return _Ttl;
      }
      set
      {
        __isset.Ttl = true;
        this._Ttl = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool MessageMetadata;
      public bool Body;
      public bool StickerId;
      public bool Attachments;
      public bool Ttl;
    }

    public MNMessagesSyncDeltaNewMessage() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                MessageMetadata = new MNMessagesSyncMessageMetadata();
                MessageMetadata.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Body = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                StickerId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.List) {
                {
                  Attachments = new List<string>();
                  TList _list26 = iprot.ReadListBegin();
                  for( int _i27 = 0; _i27 < _list26.Count; ++_i27)
                  {
                    string _elem28;
                    _elem28 = iprot.ReadString();
                    Attachments.Add(_elem28);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                Ttl = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("MNMessagesSyncDeltaNewMessage");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (MessageMetadata != null && __isset.MessageMetadata) {
          field.Name = "MessageMetadata";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          MessageMetadata.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Body != null && __isset.Body) {
          field.Name = "Body";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Body);
          oprot.WriteFieldEnd();
        }
        if (__isset.StickerId) {
          field.Name = "StickerId";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(StickerId);
          oprot.WriteFieldEnd();
        }
        if (Attachments != null && __isset.Attachments) {
          field.Name = "Attachments";
          field.Type = TType.List;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Attachments.Count));
            foreach (string _iter29 in Attachments)
            {
              oprot.WriteString(_iter29);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.Ttl) {
          field.Name = "Ttl";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Ttl);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("MNMessagesSyncDeltaNewMessage(");
      bool __first = true;
      if (MessageMetadata != null && __isset.MessageMetadata) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MessageMetadata: ");
        __sb.Append(MessageMetadata== null ? "<null>" : MessageMetadata.ToString());
      }
      if (Body != null && __isset.Body) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Body: ");
        __sb.Append(Body);
      }
      if (__isset.StickerId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("StickerId: ");
        __sb.Append(StickerId);
      }
      if (Attachments != null && __isset.Attachments) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Attachments: ");
        __sb.Append(Attachments);
      }
      if (__isset.Ttl) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ttl: ");
        __sb.Append(Ttl);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
