// Copyright (c) 2017 Jan Pluskal, Viliam Letavay
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System;
using System.Text;
using Thrift.Protocol;

namespace Netfox.Snoopers.SnooperMessenger.Protocol
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class MNMessagesSyncAttachment : TBase
  {
    private string _Id;
    private string _Mimetype;
    private string _Filename;
    private long _Fbid;
    private long _Filesize;
    private MNMessagesSyncAttachmentAppAttribution _Attributioninfo;
    private string _Xmagraphql;
    private MNMessagesSyncImageMetadata _Imagemetadata;
    private MNMessagesSyncVideoMetadata _Videometadata;

    public string Id
    {
      get
      {
        return _Id;
      }
      set
      {
        __isset.Id = true;
        this._Id = value;
      }
    }

    public string Mimetype
    {
      get
      {
        return _Mimetype;
      }
      set
      {
        __isset.Mimetype = true;
        this._Mimetype = value;
      }
    }

    public string Filename
    {
      get
      {
        return _Filename;
      }
      set
      {
        __isset.Filename = true;
        this._Filename = value;
      }
    }

    public long Fbid
    {
      get
      {
        return _Fbid;
      }
      set
      {
        __isset.Fbid = true;
        this._Fbid = value;
      }
    }

    public long Filesize
    {
      get
      {
        return _Filesize;
      }
      set
      {
        __isset.Filesize = true;
        this._Filesize = value;
      }
    }

    public MNMessagesSyncAttachmentAppAttribution Attributioninfo
    {
      get
      {
        return _Attributioninfo;
      }
      set
      {
        __isset.Attributioninfo = true;
        this._Attributioninfo = value;
      }
    }

    public string Xmagraphql
    {
      get
      {
        return _Xmagraphql;
      }
      set
      {
        __isset.Xmagraphql = true;
        this._Xmagraphql = value;
      }
    }

    public MNMessagesSyncImageMetadata Imagemetadata
    {
      get
      {
        return _Imagemetadata;
      }
      set
      {
        __isset.Imagemetadata = true;
        this._Imagemetadata = value;
      }
    }

    public MNMessagesSyncVideoMetadata Videometadata
    {
      get
      {
        return _Videometadata;
      }
      set
      {
        __isset.Videometadata = true;
        this._Videometadata = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Id;
      public bool Mimetype;
      public bool Filename;
      public bool Fbid;
      public bool Filesize;
      public bool Attributioninfo;
      public bool Xmagraphql;
      public bool Imagemetadata;
      public bool Videometadata;
    }

    public MNMessagesSyncAttachment() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Mimetype = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Filename = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                Fbid = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I64) {
                Filesize = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Struct) {
                Attributioninfo = new MNMessagesSyncAttachmentAppAttribution();
                Attributioninfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                Xmagraphql = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.Struct) {
                Imagemetadata = new MNMessagesSyncImageMetadata();
                Imagemetadata.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.Struct) {
                Videometadata = new MNMessagesSyncVideoMetadata();
                Videometadata.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("MNMessagesSyncAttachment");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Id != null && __isset.Id) {
          field.Name = "Id";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Id);
          oprot.WriteFieldEnd();
        }
        if (Mimetype != null && __isset.Mimetype) {
          field.Name = "Mimetype";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Mimetype);
          oprot.WriteFieldEnd();
        }
        if (Filename != null && __isset.Filename) {
          field.Name = "Filename";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Filename);
          oprot.WriteFieldEnd();
        }
        if (__isset.Fbid) {
          field.Name = "Fbid";
          field.Type = TType.I64;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Fbid);
          oprot.WriteFieldEnd();
        }
        if (__isset.Filesize) {
          field.Name = "Filesize";
          field.Type = TType.I64;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Filesize);
          oprot.WriteFieldEnd();
        }
        if (Attributioninfo != null && __isset.Attributioninfo) {
          field.Name = "Attributioninfo";
          field.Type = TType.Struct;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          Attributioninfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Xmagraphql != null && __isset.Xmagraphql) {
          field.Name = "Xmagraphql";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Xmagraphql);
          oprot.WriteFieldEnd();
        }
        if (Imagemetadata != null && __isset.Imagemetadata) {
          field.Name = "Imagemetadata";
          field.Type = TType.Struct;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          Imagemetadata.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Videometadata != null && __isset.Videometadata) {
          field.Name = "Videometadata";
          field.Type = TType.Struct;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          Videometadata.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("MNMessagesSyncAttachment(");
      bool __first = true;
      if (Id != null && __isset.Id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      if (Mimetype != null && __isset.Mimetype) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Mimetype: ");
        __sb.Append(Mimetype);
      }
      if (Filename != null && __isset.Filename) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Filename: ");
        __sb.Append(Filename);
      }
      if (__isset.Fbid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Fbid: ");
        __sb.Append(Fbid);
      }
      if (__isset.Filesize) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Filesize: ");
        __sb.Append(Filesize);
      }
      if (Attributioninfo != null && __isset.Attributioninfo) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Attributioninfo: ");
        __sb.Append(Attributioninfo== null ? "<null>" : Attributioninfo.ToString());
      }
      if (Xmagraphql != null && __isset.Xmagraphql) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Xmagraphql: ");
        __sb.Append(Xmagraphql);
      }
      if (Imagemetadata != null && __isset.Imagemetadata) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Imagemetadata: ");
        __sb.Append(Imagemetadata== null ? "<null>" : Imagemetadata.ToString());
      }
      if (Videometadata != null && __isset.Videometadata) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Videometadata: ");
        __sb.Append(Videometadata== null ? "<null>" : Videometadata.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
